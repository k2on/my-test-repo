{"version":3,"file":"types.ts","sources":["/vercel/path0/apps/client/dist/server/example-dir/src/config/types.ts"],"names":[],"mappings":"","sourcesContent":["export type Providers = Record<string, AuthProvider>;\n\nexport type OAuthProviders = Record<string, OAuthProviderConfig<any>>;\nexport type OTPProviders = Record<string, OTPAuthProviderConfig<any>>;\n\nexport interface TAuthConfig {\n    providers: {\n        oauth?: OAuthProviders;\n        otp?: OTPProviders;\n    };\n}\n\nexport type AuthProviderType = \"oauth\" | \"otp\";\n\nexport interface AuthProviderBase {\n    id: string;\n    label: string;\n    type: AuthProviderType;\n}\n\nexport interface UserProfile {\n    id: string;\n    name: string;\n    email: string;\n    image?: string;\n}\n\nexport type OAuthProviderConfig<P> = AuthProviderBase & {\n    type: \"oauth\";\n    clientId: string;\n    clientSecret: string;\n    scope: string[];\n    authorization: string;\n    token: string;\n    userinfo: string;\n    profile: (profile: P) => UserProfile;\n};\n\nexport interface OTPAuthProviderConfig<I> extends AuthProviderBase {\n    type: \"otp\";\n    columnName: string;\n    sendCode: (input: I) => Promise<boolean>;\n    verifyCode: (input: I, code: string) => Promise<boolean>;\n}\n\nexport type AuthProvider =\n    | OAuthProviderConfig<any>\n    | OTPAuthProviderConfig<any>;\n\nexport interface OAuthOptions {\n    clientId: string;\n    clientSecret: string;\n    scope?: string[];\n}\n"]}