{"version":3,"file":"oauth.ts","sources":["/vercel/path0/apps/client/dist/server/example-dir/src/oauth.ts"],"names":[],"mappings":"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","sourcesContent":["import { InferModel, InferSelectModel, schema } from \"@koonstack/db\";\nimport { OAuthProviderConfig, UserProfile } from \"./config/types\";\nimport { accounts } from \"../../db/src/schema/user\";\n\nexport class OAuthProvider {\n    constructor(private config: OAuthProviderConfig<any>) {}\n\n    public async getToken({\n        code,\n        redirectUri,\n    }: {\n        code: string;\n        redirectUri: string;\n    }): Promise<OAuthToken> {\n        const credentials = btoa(\n            `${this.config.clientId}:${this.config.clientSecret}`,\n        );\n        const response = await fetch(this.config.token, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: `Basic ${credentials}`,\n                Accept: \"application/json\",\n            },\n            body: `grant_type=authorization_code&code=${code}&redirect_uri=${redirectUri}`,\n        });\n        if (!response.ok) {\n            console.log(response);\n            throw Error(\"Could not get token\");\n        }\n        const token = (await response.json()) as Token;\n        return new OAuthToken(this.config, token);\n    }\n\n    public async refreshToken({ refreshToken }: { refreshToken: string }): Promise<OAuthToken> {\n        const credentials = btoa(\n            `${this.config.clientId}:${this.config.clientSecret}`,\n        );\n        const response = await fetch(this.config.token, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: `Basic ${credentials}`,\n                Accept: \"application/json\",\n            },\n            body: `grant_type=refresh_token&refresh_token=${refreshToken}`,\n        });\n        const token = (await response.json()) as Token;\n        return new OAuthToken(this.config, token);\n    }\n\n    public tokenFromAccount({ account }: { account: InferSelectModel<typeof schema.accounts> }): OAuthToken {\n        if (!account.access_token) throw Error(\"Account does not have an access token\");\n        const token: Token = {\n            access_token: account.access_token,\n            refresh_token: account.refresh_token,\n            scope: account.scope!,\n            expires_at: account.expires_at!,\n        };\n        return new OAuthToken(this.config, token)\n    }\n}\n\nexport class OAuthToken {\n    constructor(\n        private config: OAuthProviderConfig<any>,\n        private token: Token,\n    ) {}\n\n    public async getUser(): Promise<UserProfile> {\n        const response = await fetch(this.config.userinfo, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.token.access_token}`,\n                Accept: \"application/json\",\n            },\n        });\n        const json = await response.json();\n        return this.config.profile(json);\n    }\n\n    public getAccessToken() {\n        return this.token.access_token;\n    }\n    public getRefreshToken() {\n        return this.token.refresh_token;\n    }\n    public getScope() {\n        return this.token.scope;\n    }\n    public getExpiresAt() {\n        return this.token.expires_at;\n    }\n}\n\ninterface Token {\n    access_token: string;\n    refresh_token: string | null;\n    scope: string;\n    expires_at: number;\n}\n"]}